# Generated by Django 4.2.3 on 2023-07-19 19:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, unique=True)),
                ('name', models.CharField(max_length=240)),
            ],
        ),
        migrations.CreateModel(
            name='Grants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_year', models.IntegerField()),
                ('pi_name', models.CharField(max_length=240, verbose_name='PI Name')),
                ('proposal', models.CharField(max_length=240, unique=True, verbose_name='Proposal')),
                ('sponsor', models.CharField(max_length=240, verbose_name='Sponsor')),
                ('title', models.TextField()),
                ('project_type', models.CharField(max_length=240, verbose_name='Project Type')),
                ('sponsor_type', models.CharField(max_length=240, verbose_name='Sponsor Type')),
                ('status', models.CharField(max_length=240, verbose_name='Status')),
                ('award_number', models.CharField(max_length=240, verbose_name='Award Number')),
                ('donated_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('amount_used', models.DecimalField(decimal_places=2, max_digits=20)),
                ('deadline', models.DateField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard_app.department')),
            ],
        ),
        migrations.CreateModel(
            name='Donoations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_year', models.IntegerField()),
                ('donor', models.CharField(max_length=240, verbose_name='Donor')),
                ('gift_agreement', models.TextField()),
                ('donated_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('amount_used', models.DecimalField(decimal_places=2, max_digits=20)),
                ('deadline', models.DateField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard_app.department')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('staff', 'Staff')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
